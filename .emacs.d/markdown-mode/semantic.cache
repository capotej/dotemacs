;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "markdown-mode.el"
    :file "markdown-mode.el"
    :pointmax 37892
    :major-mode 'emacs-lisp-mode
    :tokens '(("easymenu" include nil nil nil [8688 8707]) ("outline" include nil nil nil [8708 8726]) ("markdown-enable-itex" variable nil nil nil nil nil [8899 8932]) ("markdown-mode-version" variable nil "1.6" ((const . t)) nil nil [9036 9074]) ("markdown-mode-hook" variable nil nil nil nil nil [9143 9174]) ("defgroup" code nil [9258 9440]) ("markdown-command" variable nil "markdown" nil "Command to run markdown." nil [9442 9545]) ("markdown-hr-length" variable nil 5 nil "Length of horizonal rules." nil [9547 9646]) ("markdown-bold-underscore" variable nil nil nil "Use two underscores for bold instead of two asterisks." nil [9648 9783]) ("markdown-italic-underscore" variable nil nil nil "Use underscores for italic instead of asterisks." nil [9785 9916]) ("font-lock" include nil nil nil [10000 10020]) ("defgroup" code nil [10022 10118]) ("markdown-italic-face" variable nil (quote font-lock-variable-name-face) nil "Italic text." nil [10120 10240]) ("markdown-bold-face" variable nil (quote font-lock-type-face) nil "Bold text" nil [10242 10348]) ("markdown-header-face" variable nil (quote font-lock-function-name-face) nil "Headers" nil [10350 10465]) ("markdown-inline-code-face" variable nil (quote font-lock-builtin-face) nil "Inline code" nil [10467 10585]) ("markdown-list-face" variable nil (quote font-lock-variable-name-face) nil "List item markers" nil [10587 10710]) ("markdown-blockquote-face" variable nil (quote font-lock-comment-face) nil "Blockquote sections and preformatted text" nil [10712 10859]) ("markdown-link-face" variable nil (quote font-lock-constant-face) nil "Link text" nil [10861 10971]) ("markdown-reference-face" variable nil (quote font-lock-type-face) nil "Link references" nil [10973 11090]) ("markdown-url-face" variable nil (quote font-lock-string-face) nil "URLs" nil [11092 11194]) ("markdown-math-face" variable nil (quote font-lock-builtin-face) nil "LaTeX expressions" nil [11196 11313]) ("markdown-regex-link-inline" variable nil "\\(!?\\[[^]]*?\\]\\)\\(([^\\)]*)\\)" ((const . t)) "Regular expression for a [text](file) or an image link ![text](file)" nil [11315 11465]) ("markdown-regex-link-reference" variable nil "\\(!?\\[[^]]+?\\]\\)[ ]?\\(\\[[^]]*?\\]\\)" ((const . t)) "Regular expression for a reference link [text][id]" nil [11467 11609]) ("markdown-regex-reference-definition" variable nil "^ \\{0,3\\}\\(\\[.+?\\]\\):\\s *\\(.*?\\)\\s *\\( \"[^\"]*\"$\\|$\\)" ((const . t)) "Regular expression for a link definition [id]: ..." nil [11611 11785]) ("markdown-regex-header-atx" variable nil "^\\(#+ \\)\\(.*?\\)\\($\\| #+$\\)" ((const . t)) "Regular expression for atx-style (hash mark) headers" nil [11787 11918]) ("markdown-regex-header-setext" variable nil "^\\(.*\\)
\\(===+\\|---+\\)$" ((const . t)) "Regular expression for setext-style (underline) headers" nil [11920 12053]) ("markdown-regex-hr" variable nil "^\\(\\*[ ]?\\*[ ]?\\*[ ]?[\\* ]*\\|-[ ]?-[ ]?-[--- ]*\\)$" ((const . t)) "Regular expression for matching Markdown horizontal rules" nil [12055 12207]) ("markdown-regex-code" variable nil "\\(^\\|[^\\]\\)\\(\\(`\\{1,2\\}\\)\\([^ \\]\\|[^ ].*?[^ \\]\\)\\3\\)" ((const . t)) "Regular expression for matching inline code fragments" nil [12209 12370]) ("markdown-regex-pre" variable nil "^    .*$" ((const . t)) "Regular expression for matching preformatted text sections" nil [12372 12477]) ("markdown-regex-list" variable nil "^[ 	]*\\([0-9]+\\.\\|[\\*\\+-]\\) " ((const . t)) "Regular expression for matching list markers" nil [12479 12598]) ("markdown-regex-bold" variable nil "\\(^\\|[^\\]\\)\\(\\([*_]\\{2\\}\\)\\(.\\|
\\)*?[^\\ ]\\3\\)" ((const . t)) "Regular expression for matching bold text" nil [12600 12742]) ("markdown-regex-italic" variable nil "\\(^\\|[^\\]\\)\\(\\([*_]\\)\\([^ \\]\\3\\|[^ ]\\(.\\|
\\)*?[^\\ ]\\3\\)\\)" ((const . t)) "Regular expression for matching italic text" nil [12744 12905]) ("markdown-regex-blockquote" variable nil "^>.*$" ((const . t)) "Regular expression for matching blockquote lines" nil [12907 13006]) ("markdown-regex-line-break" variable nil "  $" ((const . t)) "Regular expression for matching line breaks" nil [13008 13100]) ("markdown-regex-wiki-link" variable nil "\\[\\[[^]]+\\]\\]" ((const . t)) "Regular expression for matching wiki links" nil [13102 13206]) ("markdown-regex-uri" variable nil "<\\(acap\\|cid\\|data\\|dav\\|fax\\|file\\|ftp\\|gopher\\|http\\|https\\|imap\\|ldap\\|mailto\\|mid\\|modem\\|news\\|nfs\\|nntp\\|pop\\|prospero\\|rtsp\\|service\\|sip\\|tel\\|telnet\\|tip\\|urn\\|vemmi\\|wais\\)://[^>]*>" ((const . t)) "Regular expression for matching inline URIs" nil [13208 13511]) ("markdown-regex-email" variable nil "<\\(\\sw\\|\\s_\\|\\s.\\)+@\\(\\sw\\|\\s_\\|\\s.\\)+>" ((const . t)) "Regular expression for matching inline email addresses" nil [13513 13661]) ("markdown-regex-latex-expression" variable nil "\\(^\\|[^\\]\\)\\(\\$\\($\\([^\\$]\\|\\\\.\\)*\\$\\|\\([^\\$]\\|\\\\.\\)*\\)\\$\\)" ((const . t)) "Regular expression for itex $..$ or $$..$$ math mode expressions" nil [13663 13861]) ("markdown-regex-latex-display" variable nil "^\\\\\\[\\(.\\|
\\)*?\\\\\\]$" ((const . t)) "Regular expression for itex [..] display mode expressions" nil [13863 14003]) ("markdown-mode-font-lock-keywords-basic" variable nil (list (cons markdown-regex-code (quote (2 markdown-inline-code-face))) (cons markdown-regex-pre markdown-blockquote-face) (cons markdown-regex-header-setext markdown-header-face) (cons markdown-regex-header-atx markdown-header-face) (cons markdown-regex-list markdown-list-face) (cons markdown-regex-hr markdown-header-face) (cons markdown-regex-link-inline (quote ((1 markdown-link-face t) (2 markdown-url-face t)))) (cons markdown-regex-link-reference (quote ((1 markdown-link-face t) (2 markdown-reference-face t)))) (cons markdown-regex-reference-definition (quote ((1 markdown-reference-face t) (2 markdown-url-face t) (3 markdown-link-face t)))) (cons markdown-regex-bold (quote (2 markdown-bold-face))) (cons markdown-regex-italic (quote (2 markdown-italic-face))) (cons markdown-regex-blockquote markdown-blockquote-face) (cons markdown-regex-wiki-link markdown-link-face) (cons markdown-regex-uri markdown-link-face) (cons markdown-regex-email markdown-link-face)) ((const . t)) "Syntax highlighting for Markdown files." nil [14005 15148]) ("markdown-mode-font-lock-keywords-itex" variable nil (append (list (cons markdown-regex-latex-expression (quote (2 markdown-math-face))) (cons markdown-regex-latex-display markdown-math-face) (cons "(eq:\\w+)" markdown-reference-face) (cons "\\\\eqref{\\w+}" markdown-reference-face)) markdown-mode-font-lock-keywords-basic) ((const . t)) "Syntax highlighting for Markdown, itex, and wiki expressions." nil [15212 15781]) ("markdown-mode-font-lock-keywords" variable nil (if markdown-enable-itex markdown-mode-font-lock-keywords-itex markdown-mode-font-lock-keywords-basic) nil "Default highlighting expressions for Markdown mode" nil [15784 15996]) ("markdown-mode-syntax-table" variable nil (let ((markdown-mode-syntax-table (make-syntax-table))) (modify-syntax-entry 34 "w" markdown-mode-syntax-table) markdown-mode-syntax-table) nil "Syntax table for markdown-mode" nil [16082 16303]) ("markdown-wrap-or-insert" function nil ("s1" "s2") nil "Insert the strings S1 and S2.
If Transient Mark mode is on and a region is active, wrap the strings S1
and S2 around the region." nil [16389 16771]) ("markdown-insert-hr" function nil nil ((user-visible . t)) "Inserts a horizonal rule." nil [16773 17097]) ("markdown-insert-bold" function nil nil ((user-visible . t)) "Inserts markup for a bold word or phrase.
If Transient Mark mode is on and a region is active, it is made bold." nil [17099 17396]) ("markdown-insert-italic" function nil nil ((user-visible . t)) "Inserts markup for an italic word or phrase.
If Transient Mark mode is on and a region is active, it is made italic." nil [17398 17700]) ("markdown-insert-code" function nil nil ((user-visible . t)) "Inserts markup for an inline code fragment.
If Transient Mark mode is on and a region is active, it is marked
as inline code." nil [17702 17935]) ("markdown-insert-link" function nil nil ((user-visible . t)) "Inserts an inline link of the form []().
If Transient Mark mode is on and a region is active, it is used
as the link text." nil [17937 18183]) ("markdown-insert-wiki-link" function nil nil ((user-visible . t)) "Inserts a wiki link of the form [[WikiLink]].
If Transient Mark mode is on and a region is active, it is used
as the link text." nil [18185 18427]) ("markdown-insert-image" function nil nil ((user-visible . t)) "Inserts an inline image tag of the form ![]().
If Transient Mark mode is on and a region is active, it is used
as the alt text of the image." nil [18429 18695]) ("markdown-insert-header-1" function nil nil ((user-visible . t)) "Inserts a first level atx-style (hash mark) header.
If Transient Mark mode is on and a region is active, it is used
as the header text." nil [18697 18917]) ("markdown-insert-header-2" function nil nil ((user-visible . t)) "Inserts a second level atx-style (hash mark) header.
If Transient Mark mode is on and a region is active, it is used
as the header text." nil [18919 19140]) ("markdown-insert-header-3" function nil nil ((user-visible . t)) "Inserts a third level atx-style (hash mark) header.
If Transient Mark mode is on and a region is active, it is used
as the header text." nil [19142 19362]) ("markdown-insert-header-4" function nil nil ((user-visible . t)) "Inserts a fourth level atx-style (hash mark) header.
If Transient Mark mode is on and a region is active, it is used
as the header text." nil [19364 19585]) ("markdown-insert-header-5" function nil nil ((user-visible . t)) "Inserts a fifth level atx-style (hash mark) header.
If Transient Mark mode is on and a region is active, it is used
as the header text." nil [19587 19807]) ("markdown-insert-header" function nil ("n") ((user-visible . t)) "Inserts an atx-style (hash mark) header.
With no prefix argument, insert a level-1 header.  With prefix N,
insert a level-N header.  If Transient Mark mode is on and the
region is active, it is used as the header text." nil [19809 20471]) ("markdown-insert-title" function nil nil ((user-visible . t)) "Insert a setext-style (underline) first level header.
If Transient Mark mode is on and a region is active, it is used
as the header text." nil [20473 21048]) ("markdown-insert-section" function nil nil ((user-visible . t)) "Insert a setext-style (underline) second level header.
If Transient Mark mode is on and a region is active, it is used
as the header text." nil [21050 21630]) ("markdown-insert-blockquote" function nil nil ((user-visible . t)) "Start a blockquote section (or blockquote the region).
If Transient Mark mode is on and a region is active, it is used as
the blockquote text." nil [21632 21960]) ("markdown-blockquote-region" function nil ("beg" "end" "&optional" "arg") ((user-visible . t)) "Blockquote the region." nil [21962 22149]) ("markdown-insert-pre" function nil nil ((user-visible . t)) "Start a preformatted section (or apply to the region).
If Transient Mark mode is on and a region is active, it is marked
as preformatted text." nil [22151 22467]) ("markdown-pre-region" function nil ("beg" "end" "&optional" "arg") ((user-visible . t)) "Format the region as preformatted text." nil [22469 22668]) ("markdown-mode-map" variable nil (let ((markdown-mode-map (make-keymap))) (define-key markdown-mode-map "l" (quote markdown-insert-link)) (define-key markdown-mode-map "w" (quote markdown-insert-wiki-link)) (define-key markdown-mode-map "	i" (quote markdown-insert-image)) (define-key markdown-mode-map "1" (quote markdown-insert-header-1)) (define-key markdown-mode-map "2" (quote markdown-insert-header-2)) (define-key markdown-mode-map "3" (quote markdown-insert-header-3)) (define-key markdown-mode-map "4" (quote markdown-insert-header-4)) (define-key markdown-mode-map "5" (quote markdown-insert-header-5)) (define-key markdown-mode-map "b" (quote markdown-insert-bold)) (define-key markdown-mode-map "s" (quote markdown-insert-bold)) (define-key markdown-mode-map "i" (quote markdown-insert-italic)) (define-key markdown-mode-map "e" (quote markdown-insert-italic)) (define-key markdown-mode-map "f" (quote markdown-insert-code)) (define-key markdown-mode-map "c" (quote markdown-insert-code)) (define-key markdown-mode-map "b" (quote markdown-insert-blockquote)) (define-key markdown-mode-map "" (quote markdown-blockquote-region)) (define-key markdown-mode-map "p" (quote markdown-insert-pre)) (define-key markdown-mode-map "" (quote markdown-pre-region)) (define-key markdown-mode-map "-" (quote markdown-insert-hr)) (define-key markdown-mode-map "t" (quote markdown-insert-title)) (define-key markdown-mode-map "s" (quote markdown-insert-section)) (define-key markdown-mode-map (kbd "<tab>") (quote markdown-cycle)) (define-key markdown-mode-map (kbd "<S-iso-lefttab>") (quote markdown-shifttab)) (define-key markdown-mode-map "m" (quote markdown)) (define-key markdown-mode-map "p" (quote markdown-preview)) (define-key markdown-mode-map "c" (quote markdown-check-refs)) markdown-mode-map) nil "Keymap for Markdown major mode" nil [22755 24803]) ("easy-menu-define" code nil [24882 26024]) ("markdown-refcheck-buffer" variable nil "*Undefined references for %BUFFER%*" ((const . t)) "Name of buffer which will contain a list of undefined
references in `markdown-mode' buffer named %BUFFER%." nil [26187 26373]) ("markdown-has-reference-definition" function nil ("reference") nil "Find out whether Markdown REFERENCE is defined.

REFERENCE should include the square brackets, like [this]." nil [26375 26857]) ("markdown-get-undefined-refs" function nil nil nil "Return a list of undefined Markdown references.

Result is an alist of pairs (reference . occurencies), where
occurencies is itself another alist of pairs (label .
line-number).

For example, an alist corresponding to [Nice editor][Emacs] at line 12,
[GNU Emacs][Emacs] at line 45 and [manual][elisp] at line 127 is
((\"[emacs]\" (\"[Nice editor]\" . 12) (\"[GNU Emacs]\" . 45)) (\"[elisp]\" (\"[manual]\" . 127)))." nil [26859 28102]) ("markdown-add-missing-ref-definition" function nil ("ref" "buffer" "&optional" "recheck") nil "Add blank REF definition to the end of BUFFER.

REF is a Markdown reference in square brackets, like \"[lisp-history]\".

When RECHECK is non-nil, BUFFER gets rechecked for undefined
references so that REF disappears from the list of those links." nil [28104 28765]) ("when" code nil [28929 29226]) ("when" code nil [29349 29685]) ("markdown-check-refs" function nil ("&optional" "silent") ((user-visible . t)) "Show all undefined Markdown references in current `markdown-mode' buffer.

If SILENT is non-nil, do not message anything when no undefined
references found.

Links which have empty reference definitions are considered to be
defined." nil [29687 31842]) ("markdown-cycle-global-status" variable nil 1 nil nil nil [32045 32084]) ("markdown-cycle-subtree-status" variable nil nil nil nil nil [32085 32127]) ("markdown-end-of-subtree" function nil ("&optional" "invisible-OK") nil (outline-back-to-heading invisible-OK) nil [32172 33008]) ("markdown-cycle" function nil ("&optional" "arg") ((user-visible . t)) "Visibility cycling for Markdown mode." nil [33045 35544]) ("markdown-shifttab" function nil ("&optional" "arg") ((user-visible . t)) "Global visibility cycling or move to previous table field.
Calls `markdown-cycle' with argument t" nil [35584 35768]) ("markdown" function nil nil ((user-visible . t)) "Run markdown on the current buffer and preview the output in another buffer." nil [35851 36312]) ("markdown-preview" function nil nil ((user-visible . t)) "Run markdown on the current buffer and preview the output in a browser." nil [36314 36491]) ("markdown-line-number-at-pos" function nil ("&optional" "pos") nil "Return (narrowed) buffer line number at position POS.
If POS is nil, use current buffer location.
This is an exact copy of line-number-at-pos for use in emacs21." nil [36575 36999]) ("markdown-show-version" function nil nil ((user-visible . t)) "Show the version number in the minibuffer." nil [37085 37242]) ("define-derived-mode" code nil [37244 37770]) ("markdown-mode" package nil nil nil [37835 37859]))
    )
   )
  )
